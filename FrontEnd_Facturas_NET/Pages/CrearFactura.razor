@page "/crear-factura"
@inject FacturaService FacturaService
@inject UsuarioService UsuarioService
@inject ProductoService ProductoService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<PageTitle>Crear Factura</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Crear Nueva Factura</MudText>

<MudPaper Class="pa-4 my-4">
    @if (_loading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
    }
    else
    {
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudSelect T="int" @bind-Value="_usuarioSeleccionado" Label="Seleccionar Usuario" Variant="Variant.Outlined" Required="true">
                    @if (_usuarios != null)
                    {
                        @foreach (var usuario in _usuarios)
                        {
                            <MudSelectItem T="int" Value="@usuario.Id">@usuario.Nombre</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>

            <MudItem xs="12">
                <MudDivider Class="my-4" />
                <MudText Typo="Typo.h5" Class="mb-4">Productos</MudText>

                <MudGrid>
                    <MudItem xs="12" md="5">
                        <MudSelect T="int?" @bind-Value="_productoSeleccionado" Label="Producto" Variant="Variant.Outlined">
                            @if (_productos != null)
                            {
                                @foreach (var producto in _productos)
                                {
                                    <MudSelectItem T="int?" Value="@producto.Id">@producto.Nombre (Stock: @producto.Cantidad)</MudSelectItem>
                                }
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" md="3">
                        <MudNumericField @bind-Value="_cantidad" Label="Cantidad" Min="1" Variant="Variant.Outlined" />
                    </MudItem>
                    <MudItem xs="12" md="3">
                        <MudNumericField @bind-Value="_precioUnitario" Label="Precio Unitario" Min="0" Variant="Variant.Outlined" Format="N0" />
                    </MudItem>
                    <MudItem xs="12" md="1">
                        <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="AgregarProducto" Size="Size.Large" />
                    </MudItem>
                </MudGrid>
            </MudItem>

            <MudItem xs="12">
                @if (_detalles.Any())
                {
                    <MudTable Items="@_detalles" Dense="true" Hover="true" Class="mt-4">
                        <HeaderContent>
                            <MudTh>Producto</MudTh>
                            <MudTh>Cantidad</MudTh>
                            <MudTh>Precio Unitario</MudTh>
                            <MudTh>Subtotal</MudTh>
                            <MudTh>Acciones</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Producto">@context.ProductoNombre</MudTd>
                            <MudTd DataLabel="Cantidad">@context.Cantidad</MudTd>
                            <MudTd DataLabel="Precio Unitario">$@context.PrecioUnitario.ToString("N0")</MudTd>
                            <MudTd DataLabel="Subtotal">
                                <strong>$@((context.Cantidad * context.PrecioUnitario).ToString("N0"))</strong>
                            </MudTd>
                            <MudTd DataLabel="Acciones">
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => EliminarProducto(context))" Size="Size.Small" />
                            </MudTd>
                        </RowTemplate>
                    </MudTable>

                    <MudPaper Class="pa-4 mt-4" Elevation="3">
                        <MudText Typo="Typo.h4" Color="Color.Success" Align="Align.Right">
                            <strong>Total: $@CalcularTotal().ToString("N0")</strong>
                        </MudText>
                    </MudPaper>
                }
                else
                {
                    <MudAlert Severity="Severity.Info" Class="mt-4">No hay productos agregados a la factura</MudAlert>
                }
            </MudItem>

            <MudItem xs="12" Class="d-flex justify-end gap-2 mt-4">
                <MudButton Variant="Variant.Outlined" Color="Color.Default" Href="/facturas">Cancelar</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="GuardarFactura" Disabled="@(!_detalles.Any() || _usuarioSeleccionado == 0)">
                    Crear Factura
                </MudButton>
            </MudItem>
        </MudGrid>
    }
</MudPaper>

@code {
    private List<Usuario>? _usuarios;
    private List<Producto>? _productos;
    private List<DetalleTemp> _detalles = new();
    private bool _loading = true;

    private int _usuarioSeleccionado = 0;
    private int? _productoSeleccionado = null;
    private int _cantidad = 1;
    private decimal _precioUnitario = 0;

    protected override async Task OnInitializedAsync()
    {
        await CargarDatos();
    }

    private async Task CargarDatos()
    {
        _loading = true;
        try
        {
            _usuarios = await UsuarioService.GetUsuariosAsync();
            _productos = await ProductoService.GetProductosAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al cargar datos: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private void AgregarProducto()
    {
        if (_productoSeleccionado == null)
        {
            Snackbar.Add("Selecciona un producto", Severity.Warning);
            return;
        }

        if (_cantidad <= 0)
        {
            Snackbar.Add("La cantidad debe ser mayor a 0", Severity.Warning);
            return;
        }

        if (_precioUnitario <= 0)
        {
            Snackbar.Add("El precio debe ser mayor a 0", Severity.Warning);
            return;
        }

        var producto = _productos?.FirstOrDefault(p => p.Id == _productoSeleccionado);
        if (producto == null) return;

        _detalles.Add(new DetalleTemp
        {
            ProductoId = producto.Id,
            ProductoNombre = producto.Nombre,
            Cantidad = _cantidad,
            PrecioUnitario = _precioUnitario
        });

        // Limpiar campos
        _productoSeleccionado = null;
        _cantidad = 1;
        _precioUnitario = 0;

        Snackbar.Add("Producto agregado", Severity.Success);
    }

    private void EliminarProducto(DetalleTemp detalle)
    {
        _detalles.Remove(detalle);
        Snackbar.Add("Producto eliminado", Severity.Info);
    }

    private decimal CalcularTotal()
    {
        return _detalles.Sum(d => d.Cantidad * d.PrecioUnitario);
    }

    private async Task GuardarFactura()
    {
        if (_usuarioSeleccionado == 0)
        {
            Snackbar.Add("Selecciona un usuario", Severity.Warning);
            return;
        }

        if (!_detalles.Any())
        {
            Snackbar.Add("Agrega al menos un producto", Severity.Warning);
            return;
        }

        try
        {
            var factura = new Factura
            {
                UsuarioId = _usuarioSeleccionado,
                Detalles = _detalles.Select(d => new DetalleFactura
                {
                    ProductoId = d.ProductoId,
                    Cantidad = d.Cantidad,
                    PrecioUnitario = d.PrecioUnitario
                }).ToList()
            };

            await FacturaService.CreateFacturaAsync(factura);
            Snackbar.Add("Factura creada exitosamente", Severity.Success);
            Navigation.NavigateTo("/facturas");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al crear factura: {ex.Message}", Severity.Error);
        }
    }

    private class DetalleTemp
    {
        public int ProductoId { get; set; }
        public string ProductoNombre { get; set; } = string.Empty;
        public int Cantidad { get; set; }
        public decimal PrecioUnitario { get; set; }
    }
}
